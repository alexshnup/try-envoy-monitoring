node:
  cluster: test-cluster
  id: test-id

admin:
  access_log_path: "/tmp/admin_access.log"
  address:
    socket_address:
      protocol: "TCP"
      address: 0.0.0.0
      port_value: 8001


dynamic_resources:
  ads_config:
    api_type: GRPC
    transport_api_version: V3
    grpc_services:
    - envoy_grpc:
        cluster_name: xds_cluster
  cds_config:
    resource_api_version: V3
    ads: {}
  lds_config:
    resource_api_version: V3
    ads: {}


static_resources:
  listeners:
    - name: web
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 80
      filter_chains:
      - filters:
        - name: envoy.filters.network.http_connection_manager
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            codec_type: AUTO
            stat_prefix: ingress_http
            route_config:
              name: local_route
              virtual_hosts:
              - name: backend
                domains:
                - "*"
                routes:
                - match:
                    prefix: "/"
                  route:
                    cluster: web_service
            http_filters:
            - name: envoy.filters.http.router
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

    - name: redis
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 6000
      filter_chains:
        - filters:
          - name: envoy.tcp_proxy
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
              stat_prefix: tcp
              cluster: redis

    
    - name: redis_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 7777
      filter_chains:
        - filters:
            - name: envoy.filters.network.redis_proxy
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.redis_proxy.v3.RedisProxy
                stat_prefix: redis
                settings:
                  op_timeout: 5s
                prefix_routes:
                  catch_all_route:
                    cluster: redis

  

  clusters:
    - type: STRICT_DNS
      typed_extension_protocol_options:
        envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.tcp.v3.TcpProtocolOptions
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      name: xds_cluster
      load_assignment:
        cluster_name: xds_cluster
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: redis-go-control-plane
                  # address: 192.168.0.102
                  port_value: 18000

    - name: web_service
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: web_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: host.docker.internal
                      port_value: 10000
    - name: redis
      connect_timeout: 0.25s
      type: STRICT_DNS
      common_lb_config:
        healthy_panic_threshold:
          value: 0.0
      health_checks:
        - timeout: 5s
          interval: 10s
          unhealthy_interval: 10s
          healthy_threshold: 1
          unhealthy_threshold: 2
          event_log_path: /dev/stdout
          tcp_health_check:
            # send: { text: "4155544820{{ lookup('pipe', 'echo -n ' + vault_IM_REDIS_PASS + ' | xxd -p') }}0a494e464f207265706c69636174696f6e0a" }
            # send: { text: "494e464f207265706c69636174696f6e0a" } # INFO replication
            send: { text: "50494e470d0a" } # "PING\r\n" to hex
            # receive: { text: "726f6c653a6d6173746572" } # role:master
            # receive: { text: "726f6c653a" } # role:
            receive: { text: "2b504f4e470d0a" } # "+PONG\r\n" to hex
      # connect_timeout: 1s
      # type: STRICT_DNS  # static
      # lb_policy: MAGLEV
      load_assignment:
        cluster_name: redis
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: redis-master
                    port_value: 6379
            - endpoint:
                address:
                  socket_address:
                    address: redis-replica1
                    port_value: 6379
            - endpoint:
                address:
                  socket_address:
                    address: redis-replica2
                    port_value: 6379


